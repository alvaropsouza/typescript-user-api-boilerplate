{
    "openapi": "3.0.3",
    "info": {
        "title": "Swagger Users Microservice - OpenAPI 3.0",
        "description": "This is a Doc for manipulating users while using users-ms",
        "version": "1.0.2"
    },
    "servers": [
        {
            "url": "http://localhost:5000"
        },
        {
            "description": "prd",
            "url": "http://users-ms-production.up.railway.app/"
        }
    ],
    "tags": [
        {
            "name": "user",
            "description": "User management"
        }
    ],
    "paths": {
        "/user/signup": {
            "post": {
                "tags": ["user"],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "requestBody": {
                    "description": "Create User Payload",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSignupPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalServerRequestError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "tags": ["user"],
                "summary": "Logs user into the system, granting a JWT token in response body",
                "description": "",
                "operationId": "loginUser",
                "requestBody": {
                    "description": "Create User Payload",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLoginPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Authorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Authorized"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenRequestError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalServerRequestError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/{email}": {
            "get": {
                "tags": ["user"],
                "summary": "Get user by email",
                "description": "Get info from user by email",
                "operationId": "getUserByEmail",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "User email that needs to be fetched ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user payload",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenRequestError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalServerRequestError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["user"],
                "summary": "Change user password",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUserPassword",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "Email of the user that need to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update an existent user in the store",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePasswordPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid user payload",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenRequestError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalServerRequestError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["user"],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid user payload",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForbiddenRequestError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalServerRequestError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "UserSignupPayload": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@email.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "x{[SWec5",
                        "description": "Must have at least 8 characters, including at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 symbol"
                    }
                }
            },
            "UpdatePasswordPayload": {
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string",
                        "example": "x{[SWec5",
                        "description": "Must have at least 8 characters, including at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 symbol"
                    },
                    "newPassword": {
                        "type": "string",
                        "example": "x{[SWec5",
                        "description": "Must have at least 8 characters, including at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 symbol"
                    }
                }
            },
            "GetUserResponse": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@email.com"
                    },
                    "createdAt": {
                        "type": "string",
                        "example": "john@email.com"
                    },
                    "updatedAt": {
                        "type": "string",
                        "example": "john@email.com"
                    }
                }
            },
            "UserLoginPayload": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "example": "john@email.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "x{[SWec5",
                        "description": "Must have at least 8 characters, including at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 symbol"
                    }
                }
            },
            "Created": {
                "type": "object",
                "properties": {}
            },
            "Authorized": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
                }
            },
            "NotFoundError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "example": "404"
                    },
                    "body": {
                        "type": "string",
                        "example": "Not found"
                    }
                }
            },
            "BadRequestError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "example": "400"
                    },
                    "body": {
                        "type": "string",
                        "example": "Bad request"
                    }
                }
            },
            "ForbiddenRequestError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "example": "403"
                    },
                    "body": {
                        "type": "string",
                        "example": "Forbidden"
                    }
                }
            },
            "InternalServerRequestError": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "number",
                        "example": "500"
                    },
                    "body": {
                        "type": "string",
                        "example": "Internal server error"
                    }
                }
            }
        }
    }
}
